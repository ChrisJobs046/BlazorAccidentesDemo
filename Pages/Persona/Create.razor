@page "/CrearPersona"
@page "/CrearPersona/{id:int}"
@inject IPersonaService PersonaService 
@inject NavigationManager NavigationManager

<h3>Personas</h3>

<EditForm Model="@persona"> 
    <table class="table">
        <tr>
            <td>Nombre:</td>
            <td><input class="form-control col-sm-4" type="text" @bind="persona.Nombre" /></td>
        </tr>
        <tr>
            <td>Apellido:</td>
            <td><input class="form-control col-sm-4" type="text" @bind="persona.Apellido" /></td>
        </tr>
        <tr>
            <td>Telefono:</td>
            <td><input class="form-control col-sm-4" type="text" @bind="persona.Telefono" /></td>
        </tr>
        <tr>
            <td>Correo:</td>
            <td><input class="form-control col-sm-4" type="email" @bind="persona.Correo" /></td>
        </tr>
        <tr>
            <td>Cedula:</td>
            <td><input class="form-control col-sm-4" type="text" @bind="persona.Cedula" /></td>
        </tr>

        <tr>
            <td colspan="2" style="text-align:center">
                <input type="submit" value="Save" @onclick="SavePersona"/>
                <input type="button" value="Cancel" @onclick="Cancel"/>
            </td>
        </tr>
    </table>
</EditForm>

@*@if (Personas == null)
{
    <text>Cargando....</text>
}
else if (Personas.Count == 0)
{
    <text>No hay personas en la  base de datos</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Nombre</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in Personas)
            {
                <tr>
                    <td>
                        <a class="btn btn-success">Editar</a>
                        <button class="btn btn-danger">Borrar</button>
                    </td>
                    <td>@persona.PersonaId</td>
                    <td>@persona.Nombre</td>
                </tr>
            }*
        </tbody>
    </table>
}*@

@code {
    [Parameter]
    public int id { get; set; }

    private Persona persona = new Persona();

    protected override async Task OnInitializedAsync()
    {
        if(id != 0)
        {
            persona = await PersonaService.GetPersonaDetails(id);
        }
    }

    protected async Task SavePersona()
    {
        await PersonaService.SavePersona(persona);
        NavigationManager.NavigateTo("IndexPersona");
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("IndexPersona");
    }

    //Persona[] Personas { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    await CargarPersonas();
    //}

    //async Task CargarPersonas()
    //{
    //    //Personas = await Http.GetFromJsonAsync<List<Persona>>("api/persona");

    //    //using(var httpClient = new HttpClient())
    //    //{
    //    //    httpClient.BaseAddress = new Uri("https://localhost:44395/");
    //    //    httpClient.DefaultRequestHeaders.Clear();
    //    //    httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

    //    //    var response = await httpClient.GetAsync("api/Persona");
    //    //    var result = response.Content.ReadAsStringAsync().Result;

    //    //    Console.WriteLine(result);
    //    //}
    //}
}
